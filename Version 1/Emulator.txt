Emulation, or burn remove insert turn on test turn off remove code goto burn

This project came about as I was getting tired of the replacing burning testing coding rinse and repeat
in developing code for the MBC project.

Design goals.

USB based, Arduino? or Microprocessor? 
Expandable up to 1Mbit devices. (128kByte)
DIP, PLCC?
Include Reset. 

Processor, W78E516B? Z80? 6502? CD1802ACE? Arduino?
	I am going to rule out the Z80, 6502 and 1802 as they will require a USART (Not that I have made and programed one before)

Ok if I do need a USART with a Z80, 6502 or 1802 I can build a baud rate generator using a GAL

Binary counters for Address pins

Dual port ram design

battery backup

ZIF socket for processor rom

controls
	toggle switch, 
		power, memory protect,
	Push
		Target reset
		board reset, hidden away

Then insperation hit me, I have Sergey's 8085 board, I could use that as the controller, saving time and making the design a bit more simpler.
but how much easier would it be.

Ports!

I forgot ports, we can have one data port but we need a way of incrementing/reseting the counter, selecting the counters, 
	selecting the ls157 and ls245 (program/target select)

So from a ls137? we can have 3 to 7 decoder
0x10 0b00010000 Data
0x20 0b00100000	Count
0x30 0b00110000	Program/Target select, (latch), diode to show which way is selected
0x40 0b01000000	Reset Eprom
0x50 0b01010000	Reset Target, one shot 20ns
0x60 0b01100000
0x70 0b0111 0000


we can also use an arduino in there as well! use a jumper for io/mem

connections to 8085 / arduino
pin 	name 	desc
39,40	Gnd
37,38	5v
18	D0	to 8 bit latch for d0-d8 ls245
17	D1
20	D2
19	D3
22	D4
21	D5
24	D6
23	D7
26	io/mem  to ls237 / ls245
7	ale 	to ls245 / ls237 inhibit
28	reset	to counters
27	/wr	to ram / logic
30	a0	to ls237
29	a1	to ls237
32	a2	to ls237
34	a4	to ls237 enable



Sergey's 8085 board
	0x0000 = eprom
	0x8000 = RAM
	can swap with /swap_mem via a latch on a port
	Port 0x08 = USART

Code Flow, in sudo code 
	SET MEM_START = 0x8000				// Start of memory of the programming target
	STATIC VAR byte[] device_string = "eprom emulator"	
	STATIC VAR byte   device_id = 0x01			
	STATIC VAR byte   usart_port = 0x08

	8085_Initalise 
	UART_Initalise

	Send Board Code

	LOOP Input		
		Input = get board THEN Send board code
		Input = reset target THEN Reset Target
		Input = program rom size ( four bytes ) THEN Set Rom Size Counter
		Input = program rom THEN GOSUB program rom
		Input = enable target THEN enable target
	END LOOP
		
	subroutine Input
		OUTPUT byte[1] data			// MEM_START + data[1]
		POLL data = uart
	
	subroutine Initalise
		
	subroutine Send Board Code	
		
	subroutine Reset Target
	
	subroutine Set Rom Size Counter
	
	subroutine Program Rom
	
	subroutine Enable Target
	
	TARGET 8085 8085_Initalise	//sets where the target starts from. 
Sources
https://learn.adafruit.com/digital-circuits-6-eprom-emulator/the-problem
http://www.malinov.com/Home/sergeys-projects/minimax8085
